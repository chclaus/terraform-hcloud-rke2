#cloud-config
%{ if length(extra_ssh_keys) > 0 }
ssh_authorized_keys:
%{ for ssh_key in extra_ssh_keys }
- ${ssh_key}
%{ endfor }
%{ endif }
write_files:
- path: /etc/rancher/rke2/config.yaml
  permissions: "0600"
  owner: root:root
  content: |
    %{ if master_index != 0 }
    server: https://${lb_address}:9345
    %{ endif }
    disable-cloud-controller: true
    tls-san: 
      - ${lb_address}
      - ${lb_external_v4}
      - ${lb_external_v6}
    token: "${rke2_cluster_secret}"
    node-taint: 
    ${node_taint}
    cloud-provider-name: "hcloud"
    kube-apiserver-arg:
    - "kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname"
    kubelet-arg:
    - "cloud-provider=external"
- path: /var/lib/rancher/rke2/server/manifests/rke2-canal.yaml
  permissions: "0600"
  owner: root:root
  content: |
    apiVersion: helm.cattle.io/v1
    kind: HelmChartConfig
    metadata:
      name: rke2-canal
      namespace: kube-system
    spec:
      valuesContent: |-
        flannel:
          iface: "priv"
- path: /opt/rke2/run_rke2.sh
  permissions: "0755"
  owner: root:root
  content: |
    #!/bin/bash
    internal_ip=$(curl -sfL http://169.254.169.254/hetzner/v1/metadata/private-networks | grep "ip:" | head -n 1| cut -d ":" -f2 | xargs)
    internal_mac=$(curl -sfL http://169.254.169.254/hetzner/v1/metadata/private-networks | grep "mac_address:" | head -n 1 | awk '{print $2}')
    echo "node-ip: $internal_ip" >> /etc/rancher/rke2/config.yaml
    echo -e "[Match]\nMACAddress=$internal_mac\n[Link]\nName=priv" > /etc/systemd/network/80-internal.link

    %{ if master_index != 0 }
    function num_healthy {
      jq -r '[.load_balancer.targets | .[] | select(.label_selector.selector == "role-controlplane=1") | .targets | .[] | select(.health_status | all(.status == "healthy"))] | length'
    }
    function get_lb {
      LB="$(echo ${lb_id} | cut -d \- -f 1)"
      curl -sSL -H "Authorization: Bearer ${api_token}" "https://api.hetzner.cloud/v1/load_balancers/$LB"
    }
    while true; do
      res="$(get_lb | num_healthy)"
      if [ "$?" == 0 ] && [ "$res" -ge ${master_index} ]; then
        break
      fi
      echo "not enought masters ready to join next ($res / ${master_index})"
      sleep 10
    done
    %{ endif }
    curl -fsSL https://raw.githubusercontent.com/rancher/rke2/master/install.sh --output install.sh
    chmod u+x install.sh
    INSTALL_RKE2_METHOD='tar' INSTALL_RKE2_TYPE=server INSTALL_RKE2_CHANNEL="${rke2_channel}" ./install.sh
    systemctl enable rke2-server
    systemctl start rke2-server

runcmd:
- apt-get update
- apt-get install -y jq curl 
# - apt-get install -y iptables git telnet vim software-properties-common resolvconf linux-headers-$(uname -r) jq curl open-iscsi
# - echo "nameserver 1.1.1.1" > /etc/resolvconf/resolv.conf.d/tail
# - echo "RateLimitIntervalSec=0" >> /etc/systemd/journald.conf
# - echo "RateLimitBurst=0" >> /etc/systemd/journald.conf
# - systemctl restart systemd-journald.service
# - systemctl start resolvconf
- /opt/rke2/run_rke2.sh
- rm /opt/rke2/run_rke2.sh
