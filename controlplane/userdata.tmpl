#cloud-config
write_files:
- path: /etc/rancher/rke2/config.yaml
  permissions: "0600"
  owner: root:root
  content: |
    %{ if master_index != 0 }
    server: ${rke2_url}
    %{ endif }
    disable-cloud-controller: true
    tls-san: ${jsonencode(tls_san)}
    token: "${rke2_cluster_secret}"
    node-taint:
    ${node_taint}
    kube-apiserver-arg:
    - "kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname"
    kubelet-arg:
    - "cloud-provider=external"
- path: /var/lib/rancher/rke2/server/manifests/rke2-canal-config.yaml
  permissions: "0600"
  owner: root:root
  content: |
    apiVersion: helm.cattle.io/v1
    kind: HelmChartConfig
    metadata:
      name: rke2-canal
      namespace: kube-system
    spec:
      valuesContent: |-
        flannel:
          iface: "ens0"
%{ if hetzner_ccm_enabled }
- path: /var/lib/rancher/rke2/server/manifests/hcloud-secret.yaml
  permissions: "0600"
  owner: root:root
  content: |
    apiVersion: v1
    kind: Secret
    metadata:
      name: hcloud
      namespace: kube-system
    type: Opaque
    data:
      token: ${base64encode(hcloud_token)}
      network: ${base64encode(network_id)}
- path: /var/lib/rancher/rke2/server/manifests/rke2-ingress-hcloud-lb.yaml
  permissions: "0600"
  owner: root:root
  content: |
    apiVersion: helm.cattle.io/v1
    kind: HelmChartConfig
    metadata:
      name: rke2-ingress-nginx
      namespace: kube-system
    spec:
      valuesContent: |-
        controller:
          kind: Deployment
          autoscaling:
            enabled: true
            minReplicas: 2
            maxReplicas: 3
          hostNetwork: false
          service:
            enabled: true
            type: LoadBalancer
            externalTrafficPolicy: Local
            annotations:
              load-balancer.hetzner.cloud/location: nbg1
- path: /var/lib/rancher/rke2/server/manifests/hcloud-ccm-networks.yaml
  permissions: "0600"
  owner: root:root
  content: |
    # NOTE: this release was tested against kubernetes v1.18.x
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: cloud-controller-manager
      namespace: kube-system
    ---
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: system:cloud-controller-manager
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-admin
    subjects:
      - kind: ServiceAccount
        name: cloud-controller-manager
        namespace: kube-system
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: hcloud-cloud-controller-manager
      namespace: kube-system
    spec:
      replicas: 1
      revisionHistoryLimit: 2
      selector:
        matchLabels:
          app: hcloud-cloud-controller-manager
      template:
        metadata:
          labels:
            app: hcloud-cloud-controller-manager
          annotations:
            scheduler.alpha.kubernetes.io/critical-pod: ''
        spec:
          serviceAccountName: cloud-controller-manager
          dnsPolicy: Default
          tolerations:
            # this taint is set by all kubelets running `--cloud-provider=external`
            # so we should tolerate it to schedule the cloud controller manager
            - key: "node.cloudprovider.kubernetes.io/uninitialized"
              value: "true"
              effect: "NoSchedule"
            - key: "CriticalAddonsOnly"
              operator: "Exists"
            # cloud controller manages should be able to run on masters
            - key: "node-role.kubernetes.io/master"
              effect: NoSchedule
            - key: "node-role.kubernetes.io/control-plane"
              effect: NoSchedule
            - key: "node.kubernetes.io/not-ready"
              effect: "NoSchedule"
          hostNetwork: true
          containers:
            - image: hetznercloud/hcloud-cloud-controller-manager:v1.12.0
              name: hcloud-cloud-controller-manager
              command:
                - "/bin/hcloud-cloud-controller-manager"
                - "--cloud-provider=hcloud"
                - "--leader-elect=false"
                - "--allow-untagged-cloud"
                - "--allocate-node-cidrs=true"
                - "--cluster-cidr=10.244.0.0/16"
              resources:
                requests:
                  cpu: 100m
                  memory: 50Mi
              env:
                - name: NODE_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: spec.nodeName
                - name: HCLOUD_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: hcloud
                      key: token
                - name: HCLOUD_NETWORK
                  valueFrom:
                    secretKeyRef:
                      name: hcloud
                      key: network
%{ endif }
- path: /var/lib/rancher/rke2/server/manifests/system-upgrade-controller.yaml
  permissions: "0600"
  owner: root:root
  content: |
    apiVersion: v1
    kind: Namespace
    metadata:
      name: system-upgrade
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: system-upgrade
      namespace: system-upgrade
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name:  system-upgrade
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-admin
    subjects:
    - kind: ServiceAccount
      name: system-upgrade
      namespace: system-upgrade
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: default-controller-env
      namespace: system-upgrade
    data:
      SYSTEM_UPGRADE_CONTROLLER_DEBUG: "false"
      SYSTEM_UPGRADE_CONTROLLER_THREADS: "2"
      SYSTEM_UPGRADE_JOB_ACTIVE_DEADLINE_SECONDS: "900"
      SYSTEM_UPGRADE_JOB_BACKOFF_LIMIT: "99"
      SYSTEM_UPGRADE_JOB_IMAGE_PULL_POLICY: "Always"
      SYSTEM_UPGRADE_JOB_KUBECTL_IMAGE: "rancher/kubectl:v1.18.20"
      SYSTEM_UPGRADE_JOB_PRIVILEGED: "true"
      SYSTEM_UPGRADE_JOB_TTL_SECONDS_AFTER_FINISH: "900"
      SYSTEM_UPGRADE_PLAN_POLLING_INTERVAL: "15m"
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: system-upgrade-controller
      namespace: system-upgrade
    spec:
      selector:
        matchLabels:
          upgrade.cattle.io/controller: system-upgrade-controller
      template:
        metadata:
          labels:
            upgrade.cattle.io/controller: system-upgrade-controller # necessary to avoid drain
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - {key: "node-role.kubernetes.io/master", operator: Exists}
          serviceAccountName: system-upgrade
          tolerations:
            - key: "CriticalAddonsOnly"
              operator: "Exists"
            - key: "node-role.kubernetes.io/master"
              operator: "Exists"
              effect: "NoSchedule"
            - key: "node-role.kubernetes.io/controlplane"
              operator: "Exists"
              effect: "NoSchedule"
            - key: "node-role.kubernetes.io/control-plane"
              operator: "Exists"
              effect: "NoSchedule"
            - key: "node-role.kubernetes.io/etcd"
              operator: "Exists"
              effect: "NoExecute"
          containers:
            - name: system-upgrade-controller
              image: rancher/system-upgrade-controller:v0.7.5
              imagePullPolicy: IfNotPresent
              envFrom:
                - configMapRef:
                    name: default-controller-env
              env:
                - name: SYSTEM_UPGRADE_CONTROLLER_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.labels['upgrade.cattle.io/controller']
                - name: SYSTEM_UPGRADE_CONTROLLER_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
              volumeMounts:
                - name: etc-ssl
                  mountPath: /etc/ssl
                - name: etc-pki
                  mountPath: /etc/pki
                - name: etc-ca-certificates
                  mountPath: /etc/ca-certificates
                - name: tmp
                  mountPath: /tmp
          volumes:
            - name: etc-ssl
              hostPath:
                path: /etc/ssl
                type: Directory
            - name: etc-pki
              hostPath:
                path: /etc/pki
                type: DirectoryOrCreate
            - name: etc-ca-certificates
              hostPath:
                path: /etc/ca-certificates
                type: DirectoryOrCreate
            - name: tmp
              emptyDir: {}
- path: /opt/rke2/run_rke2.sh
  permissions: "0755"
  owner: root:root
  content: |
    #!/bin/bash
    internal_ip=$(curl -sfL http://169.254.169.254/hetzner/v1/metadata/private-networks | grep "ip:" | head -n 1| cut -d ":" -f2 | xargs)
    # internal_mac=$(curl -sfL http://169.254.169.254/hetzner/v1/metadata/private-networks | grep "mac_address:" | head -n 1 | awk '{print $2}')
    echo "node-ip: $internal_ip" >> /etc/rancher/rke2/config.yaml
    # echo -e "[Match]\nMACAddress=$internal_mac\n[Link]\nName=priv" > /etc/systemd/network/80-internal.link

    %{ if master_index != 0 }
    # wait for first master to be up
    while ! curl -sk -m 5 "${rke2_url}"; do sleep 1; done
    %{ endif }
    curl -fsSL https://raw.githubusercontent.com/rancher/rke2/master/install.sh --output install.sh
    chmod u+x install.sh
    INSTALL_RKE2_METHOD='tar' INSTALL_RKE2_TYPE=server INSTALL_RKE2_CHANNEL="${rke2_channel}" ./install.sh
    systemctl enable rke2-server
    systemctl start rke2-server

runcmd:
- apt-get update
- apt-get install -y jq curl
# - apt-get install -y iptables git telnet vim software-properties-common resolvconf linux-headers-$(uname -r) jq curl open-iscsi
# - echo "nameserver 1.1.1.1" > /etc/resolvconf/resolv.conf.d/tail
# - echo "RateLimitIntervalSec=0" >> /etc/systemd/journald.conf
# - echo "RateLimitBurst=0" >> /etc/systemd/journald.conf
# - systemctl restart systemd-journald.service
# - systemctl start resolvconf
- /opt/rke2/run_rke2.sh
- rm /opt/rke2/run_rke2.sh
